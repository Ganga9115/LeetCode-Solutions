import java.util.*;
import java.util.Arrays;
import java.util.PriorityQueue;

public class PartyChairs {
    public int smallestChair(int[][] times, int targetFriend) {
        int n = times.length;
        int[][] arrivals = new int[n][2];
        for (int i = 0; i < n; i++) {
            arrivals[i][0] = times[i][0]; // arrival time
            arrivals[i][1] = i; // friend number
        }
        Arrays.sort(arrivals, (a, b) -> a[0] - b[0]);
 PriorityQueue<Integer> availableChairs = new PriorityQueue<>();
        for (int i = 0; i < n; i++) availableChairs.offer(i);
 PriorityQueue<int[]> leavingFriends = new PriorityQueue<>((a, b) -> a[0] - b[0]);
 for (int[] arrival : arrivals) {
            int currentTime = arrival[0];
            int friendIndex = arrival[1];

           
            while (!leavingFriends.isEmpty() && leavingFriends.peek()[0] <= currentTime) {
                int[] leavingFriend = leavingFriends.poll();
                availableChairs.offer(leavingFriend[1]);  // Mark the chair as available
            }
 int assignedChair = availableChairs.poll();
 if (friendIndex == targetFriend) {
                return assignedChair;
            }
 leavingFriends.offer(new int[]{times[friendIndex][1], assignedChair});
        }
  return -1;
    }
public static void main(String[] args) {
PartyChairs pc = new PartyChairs();
int a = sc.nextInt();
int b = sc.nextInt();
        int[][] times1 = new int[a][b];
for(int i=0;i<a;i++)
{
for(int j=0;j<b;j++)
{
times1[i][j] = sc.nextInt();
}
}
int targetfriend = sc.nextInt();
        System.out.println(pc.smallestChair(times1, targetfriend));  

   }
}
